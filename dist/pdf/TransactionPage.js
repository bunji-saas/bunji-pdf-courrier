import React from 'react';
import { useMemo } from 'react';
import { Page, Font, StyleSheet, View, Text } from '@react-pdf/renderer';
import { fCurr, fSqm, fMeters } from '../utils/format-number';
import { fMonthYearShort } from '../utils/format-dates';
import Footer from './Footer';
Font.register({
    family: 'Roboto',
    fonts: [
        { src: '/fonts/Roboto-Regular.ttf' },
        { src: '/fonts/Roboto-Bold.ttf', fontWeight: 'bold' },
    ],
});
const useStyles = () => useMemo(() => StyleSheet.create({
    mb40: { marginBottom: 40 },
    h1: { fontSize: 24, fontWeight: 'bold' },
    body1: { fontSize: 10 },
    body2: { fontSize: 9 },
    subtitle1: { fontSize: 10, fontWeight: 700 },
    subtitle2: { fontSize: 9, fontWeight: 700 },
    alignRight: { textAlign: 'right' },
    bold: { fontWeight: 'bold' },
    page: {
        fontSize: 9,
        lineHeight: 1.6,
        fontFamily: 'Roboto',
        backgroundColor: '#FFFFFF',
        padding: '40px 40px 120px 40px',
    },
    table: {
        display: 'flex',
        width: 'auto',
    },
    tableHead: {
        backgroundColor: 'rgb(230, 234, 238)',
        fontWeight: 600,
        fontSize: '12px',
        paddingTop: '6px',
    },
    tableRow: {
        flexDirection: 'row',
        borderBottomWidth: 1,
        borderStyle: 'solid',
        borderColor: '#DFE3E8',
        display: 'flex',
        justifyContent: 'center', // Center horizontally
        alignItems: 'center',
        margin: '0px',
        padding: 0,
    },
    tableCell: {
        margin: '0px',
        padding: '6px 5px',
        height: '35px',
        display: 'flex',
        justifyContent: 'center', // Center horizontally
        alignItems: 'center',
    },
    tableCellLast: {
        flexDirection: 'row',
        borderStyle: 'solid',
        borderColor: '#000000',
        borderRightWidth: 2,
        borderLeftWidth: 2,
    },
    noBorder: {
        paddingTop: 8,
        paddingBottom: 0,
        borderBottomWidth: 0,
    },
    tableCellRowId: {
        width: '5%',
        textAlign: 'center',
    },
    tableCellDate: {
        width: '15%',
        textAlign: 'center',
    },
    tableCellAddress: {
        width: '50%',
        paddingRight: 16,
    },
    tableCellNumberCol: {
        width: '15%',
        textAlign: 'center',
    },
}), []);
const items = [
    {
        id: 1,
        date: '2021-09-01',
        address: '34 rue legendre',
        city: 'Paris',
        zipCode: '75017',
        distance: 100,
        rooms: 2,
        surface: 48,
        landSurface: 200,
        price: 500000,
        priceSqm: 12000,
    },
    {
        id: 2,
        date: '2021-09-01',
        address: '34 rue legendre',
        city: 'Paris',
        zipCode: '75017',
        distance: 100,
        rooms: 2,
        surface: 48,
        landSurface: 200,
        price: 500000,
        priceSqm: 12000,
    },
    {
        id: 3,
        date: '2021-09-01',
        address: '34 rue legendre',
        city: 'Paris',
        zipCode: '75017',
        distance: 100,
        rooms: 2,
        surface: 48,
        landSurface: 200,
        price: 500000,
        priceSqm: 12000,
    },
    {
        id: 4,
        date: '2021-09-01',
        address: '34 rue legendre',
        city: 'Paris',
        zipCode: '75017',
        distance: 100,
        rooms: 2,
        surface: 48,
        landSurface: 200,
        price: 500000,
        priceSqm: 12000,
    },
];
const TransactionPage = ({ agency, advSetting }) => {
    const styles = useStyles();
    return (React.createElement(Page, { size: "A4", style: styles.page },
        React.createElement(Text, { style: [styles.h1, styles.mb40] }, "Transactions \u00E0 proximit\u00E9"),
        React.createElement(View, { style: styles.table },
            React.createElement(View, { style: [styles.tableRow, styles.tableHead] },
                React.createElement(View, { style: [styles.tableCell, styles.tableCellRowId] },
                    React.createElement(Text, { style: styles.subtitle2 }, "#")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellDate] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Date")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellAddress] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Adresse")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Distance")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Pi\u00E8ces")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Surface")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Terrain")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Prix")),
                React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                    React.createElement(Text, { style: styles.subtitle2 }, "Prix m\u00B2"))),
            React.createElement(View, null,
                items.map((item, index) => (React.createElement(View, { style: styles.tableRow, key: item.id },
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellRowId] },
                        React.createElement(Text, null, index + 1)),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellDate] },
                        React.createElement(Text, null, fMonthYearShort(item.date))),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellAddress] },
                        React.createElement(Text, { style: styles.subtitle2 }, item.address),
                        React.createElement(Text, null,
                            item.city,
                            " (",
                            item.zipCode,
                            ")")),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                        React.createElement(Text, null, fMeters(item.distance))),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                        React.createElement(Text, null, item.rooms)),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                        React.createElement(Text, null, fSqm(item.surface))),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                        React.createElement(Text, null, fSqm(item.landSurface))),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                        React.createElement(Text, null, fCurr(item.price))),
                    React.createElement(View, { style: [
                            styles.tableCell,
                            styles.tableCellNumberCol,
                            styles.bold,
                            styles.tableCellLast,
                        ] },
                        React.createElement(Text, null, fCurr(item.priceSqm)))))),
                React.createElement(View, { style: [styles.tableRow, styles.noBorder] },
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellRowId] }),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellDate] }),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellAddress] }),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] }),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] }),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] }),
                    React.createElement(View, { style: [styles.tableCell, styles.tableCellNumberCol] },
                        React.createElement(Text, null, "Total")),
                    React.createElement(View, { style: [styles.tableCellNumberCol, styles.bold] },
                        React.createElement(Text, null, fCurr(12000)))))),
        React.createElement(Footer, { agency: agency, advSetting: advSetting })));
};
export default TransactionPage;
